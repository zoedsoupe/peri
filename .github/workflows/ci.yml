name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    env:
      MIX_ENV: test

    strategy:
      matrix:
        elixir: [1.18.1]
        otp: [27.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Cache Elixir deps
        uses: actions/cache@v4
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.MIX_ENV }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Cache Elixir _build
        uses: actions/cache@v4
        id: build-cache
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ env.MIX_ENV }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Install deps
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get --only ${{ env.MIX_ENV }}

      - name: Compile deps
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: mix deps.compile --warnings-as-errors

      - name: Clean build
        run: mix clean

      - name: Check code formatting
        run: mix format --check-formatted

      - name: Run Credo
        run: mix credo --strict

  static-analisys:
    runs-on: ubuntu-latest

    env:
      MIX_ENV: test

    strategy:
      matrix:
        elixir: [1.18.1]
        otp: [27.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
      
      - name: Cache Elixir deps
        uses: actions/cache@v4
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.MIX_ENV }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Cache Elixir _build
        uses: actions/cache@v4
        id: build-cache
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ env.MIX_ENV }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Install deps
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get --only ${{ env.MIX_ENV }}

      - name: Compile deps
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: mix deps.compile --warnings-as-errors

      # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      - name: Restore PLT cache
        uses: actions/cache/restore@v3
        id: plt_cache
        with:
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plt
          restore-keys: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plt
          path: priv/plts

      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Save PLT cache
        uses: actions/cache/save@v3
        if: steps.plt_cache.outputs.cache-hit != 'true'
        id: plt_cache_save
        with:
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plt
          path: priv/plts

      - name: Run dialyzer
        run: mix dialyzer --format github

  test:
    runs-on: ubuntu-latest

    env:
      MIX_ENV: test

    strategy:
      matrix:
        elixir: [1.18.1]
        otp: [27.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Cache Elixir deps
        uses: actions/cache@v4
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.MIX_ENV }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Cache Elixir _build
        uses: actions/cache@v4
        id: build-cache
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ env.MIX_ENV }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Install deps
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get --only ${{ env.MIX_ENV }}

      - name: Compile deps
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: mix deps.compile --warnings-as-errors

      - name: Clean build
        run: mix clean

      - name: Run tests
        run: mix test
